(ql:quickload :drakma)
(ql:quickload :closure-html)
(ql:quickload :cxml-stp)

(defun parse-lang (lang)
  (cond ((string-equal lang "ruby") "ruby/mri-2.2")
        ((string-equal lang "c") "c/gcc-4.9.1")
        ((or (string-equal lang "haskell") (string-equal lang "hasklel")) "haskell/hugs98-sep-2006")
        ((string-equal lang "perl") "perl/perl-5.20.0")
        ((string-equal lang "javascript") "javascript/node-0.10.29")
        ((string-equal lang "python") "python/cpython-3.4.1")
        (t lang)))

(defun evaluate (lang code)
  (let ((request (drakma:http-request "http://eval.in" :method :post :parameters `(("code" . ,code) ("lang" . ,(parse-lang lang)) ("execute" . "on"))))
        (i 0))
    (stp:do-recursively (x (chtml:parse request (cxml-stp:make-builder)))
      (cond ((and (typep x 'stp:element) (equal (stp:local-name x) "pre")) (incf i))
            ((= i 3) (return-from evaluate (stp:string-value x)))))))

(defcommand ":eval" (msg)
  (let ((output (evaluate (cadr (words msg)) (concatenate-words (cddr (words msg))))))
    (if (every (lambda (c) (or (char= c #\space) (char= c #\newline))) output)
        (msg (format nil "~a: No output" (user msg)))
        (msg (format nil "~a: ~a" (user msg) output)))))
